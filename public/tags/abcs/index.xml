<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>ABCs - Tag - Han&#39;s XYZ</title>
        <link>http://localhost:1313/tags/abcs/</link>
        <description>ABCs - Tag - Han&#39;s XYZ</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tabularasa8931@gmail.com (Han)</managingEditor>
            <webMaster>tabularasa8931@gmail.com (Han)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 28 Jan 2025 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/abcs/" rel="self" type="application/rss+xml" /><item>
    <title>Abstract Classes or Protocols</title>
    <link>http://localhost:1313/20250128_python_protocol_abstract_classes/</link>
    <pubDate>Tue, 28 Jan 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250128_python_protocol_abstract_classes/</guid>
    <description><![CDATA[<h1 id="introduction">Introduction</h1>
<p>When it comes to writing clean, maintainable, and scalable Python code, design matters. As your projects grow, you&rsquo;ll often find yourself needing to enforce structure, ensure consistency, and promote reusability. This is where Python&rsquo;s <a href="https://docs.python.org/3/library/abc.html" target="_blank" rel="noopener noreffer">Abstract Base Classes (ABCs)</a>
 and <a href="https://www.python.org/dev/peps/pep-0544/" target="_blank" rel="noopener noreffer">Protocols</a>
 come into playâ€”two powerful features that help you design better software.</p>
<p>Abstract classes act as <strong>blueprints for other classes, allowing you to define methods that must be implemented by any subclass</strong>. They&rsquo;re typically used for creating a shared foundation while enforcing a specific structure. Protocols, on the other hand, take a more flexible approach. Instead of relying on inheritance, they <strong>let you define interfaces based on behavior</strong>, making them ideal for <em>duck typing</em> (or <em>structural subtyping</em>) and runtime flexibility.</p>]]></description>
</item>
</channel>
</rss>
