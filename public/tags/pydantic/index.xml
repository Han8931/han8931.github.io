<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Pydantic - Tag - Han&#39;s XYZ</title>
        <link>http://localhost:1313/tags/pydantic/</link>
        <description>Pydantic - Tag - Han&#39;s XYZ</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tabularasa8931@gmail.com (Han)</managingEditor>
            <webMaster>tabularasa8931@gmail.com (Han)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 26 Apr 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/pydantic/" rel="self" type="application/rss+xml" /><item>
    <title>Data validation with Pydantic!</title>
    <link>http://localhost:1313/20240426_pydantic/</link>
    <pubDate>Fri, 26 Apr 2024 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20240426_pydantic/</guid>
    <description><![CDATA[<p>Python&rsquo;s dynamic typing system is indeed convenient, allowing you to create variables without explicitly declaring their types. While this flexibility can streamline development, it can also introduce unexpected behavior, particularly when handling data from external sources like APIs or user input.</p>
<p>Consider the following scenario:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">employee</span> <span class="o">=</span> <span class="n">Employee</span><span class="p">(</span><span class="s2">&#34;Han&#34;</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span> <span class="c1"># Correct</span>
</span></span><span class="line"><span class="cl"><span class="n">employee</span> <span class="o">=</span> <span class="n">Employee</span><span class="p">(</span><span class="s2">&#34;Moon&#34;</span><span class="p">,</span> <span class="s2">&#34;30&#34;</span><span class="p">)</span> <span class="c1"># Correct</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Here, the second argument is intended to represent an age, typically an integer. However, in the second example, it&rsquo;s a string, potentially leading to errors or unexpected behavior down the line.</li>
</ul>
<p>To address such issues, Pydantic offers a solution through data validation. Pydantic is a library specifically designed for this purpose, ensuring that the data conforms to pre-defined schemas.</p>]]></description>
</item>
</channel>
</rss>
