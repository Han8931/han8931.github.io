<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Han&#39;s XYZ</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on Han&#39;s XYZ</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>tabularasa8931@gmail.com (Han)</managingEditor>
    <webMaster>tabularasa8931@gmail.com (Han)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 31 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Agentic AI with Pydantic-AI Part 1.</title>
      <link>http://localhost:1313/pydantic_ai/</link>
      <pubDate>Sun, 31 Aug 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/pydantic_ai/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;AI has already changed how we interact with technology. The real shift is happening now with &lt;strong&gt;agents&lt;/strong&gt;: AI systems that can reason, make decisions, and take action.&lt;/p&gt;&#xA;&lt;p&gt;Unlike a chatbot that passively replies, an agent can &lt;strong&gt;break down complex tasks&lt;/strong&gt;, call APIs or databases, use tools, and deliver structured results. This is what makes the idea of &lt;em&gt;Agentic AI&lt;/em&gt; so powerful ‚Äî it&amp;rsquo;s not just about conversation, it&amp;rsquo;s about &lt;strong&gt;problem-solving with initiative&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clean Validation with Pydantic v2</title>
      <link>http://localhost:1313/pydantic/</link>
      <pubDate>Sat, 30 Aug 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/pydantic/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;üìù &lt;strong&gt;Update&lt;/strong&gt; (2025-08): This post was originally published in &lt;strong&gt;April 2024&lt;/strong&gt; and has been updated to reflect changes in &lt;strong&gt;Pydantic v2&lt;/strong&gt;, including the new &lt;em&gt;field validator&lt;/em&gt;, &lt;em&gt;model validator&lt;/em&gt;, and &lt;em&gt;Annotated&lt;/em&gt;-based validation patterns. Also, this post now includes a &lt;strong&gt;new section on using Pydantic with MongoDB&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Python&amp;rsquo;s dynamic typing system is indeed convenient, allowing you to create variables without explicitly declaring their types. While this flexibility can streamline development, it can also introduce unexpected behavior, particularly when handling data from external sources like APIs or user input.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to logging in Python</title>
      <link>http://localhost:1313/python-logging/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/python-logging/</guid>
      <description>&lt;h2 id=&#34;a-gentle-practical-introduction-to-logging-in-python&#34;&gt;A gentle, practical introduction to &lt;code&gt;logging&lt;/code&gt; in Python&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;why-bother-with-a-dedicated-logging-library&#34;&gt;Why bother with a dedicated logging library?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Prints don‚Äôt scale.&lt;/strong&gt; &lt;code&gt;print()&lt;/code&gt; is fine during quick experiments, but real programs need a record that can be filtered, rotated, or shipped elsewhere.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Separation of concerns.&lt;/strong&gt; You decide &lt;em&gt;what&lt;/em&gt; to log in your code; &lt;code&gt;logging&lt;/code&gt; decides &lt;em&gt;where&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; to write it (console, file, etc.).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Built-in, no extra dependency.&lt;/strong&gt; The standard library‚Äôs &lt;code&gt;logging&lt;/code&gt; module is powerful enough for most applications.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;core-concepts&#34;&gt;Core concepts&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Concept&lt;/th&gt;&#xA;          &lt;th&gt;Role in the ecosystem&lt;/th&gt;&#xA;          &lt;th&gt;Typical examples&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Logger&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The entry point your code calls (&lt;code&gt;logger.info(...)&lt;/code&gt;). You can have many, one per module.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;&amp;quot;__main__&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;my_package.worker&amp;quot;&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Handler&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Decides &lt;em&gt;where&lt;/em&gt; the record goes.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;StreamHandler&lt;/code&gt; (stdout), &lt;code&gt;FileHandler&lt;/code&gt;, &lt;code&gt;TimedRotatingFileHandler&lt;/code&gt;, &lt;code&gt;SMTPHandler&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Formatter&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Decides &lt;em&gt;how&lt;/em&gt; the record looks.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;&#39;%(asctime)s - %(levelname)s - %(name)s - %(message)s&#39;&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;a-minimal-logger&#34;&gt;A minimal logger&lt;/h3&gt;&#xA;&lt;div class=&#34;code-block code-line-numbers open&#34; style=&#34;counter-reset: code-block 0&#34;&gt;&#xA;    &lt;div class=&#34;code-header language-python&#34;&gt;&#xA;        &lt;span class=&#34;code-title&#34;&gt;&lt;i class=&#34;arrow fas fa-angle-right fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;        &lt;span class=&#34;ellipses&#34;&gt;&lt;i class=&#34;fas fa-ellipsis-h fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;        &lt;span class=&#34;copy&#34; title=&#34;Copy to clipboard&#34;&gt;&lt;i class=&#34;far fa-copy fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;    &lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;logging&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;logging&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;basicConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logging&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INFO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%(levelname)s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; | &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%(message)s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;logging&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;basicConfig&lt;/code&gt; is a one-liner good for small scripts.&lt;/li&gt;&#xA;&lt;li&gt;In bigger projects, mixing multiple modules / log files, you&amp;rsquo;ll want finer control.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;rotating-files-at-midnight&#34;&gt;Rotating files at midnight&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Rotating a log file means creating a new log file after a certain time or size limit is reached&lt;/strong&gt;. In this case, a new file is created every night at midnight. Only the most recent two log files are kept‚Äîyesterday&amp;rsquo;s and today‚Äôs‚Äîwhile older ones are deleted automatically.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rediscovering Python&#39;s Pathlib</title>
      <link>http://localhost:1313/pathlib/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/pathlib/</guid>
      <description>&lt;h2 id=&#34;from-type-hint-to-power-tool--pythons-pathlib&#34;&gt;From Type Hint to Power Tool:  Python&amp;rsquo;s &lt;code&gt;Pathlib&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;For a long time, I used &lt;code&gt;Path&lt;/code&gt; from Python&amp;rsquo;s &lt;code&gt;pathlib&lt;/code&gt; module purely as a &lt;strong&gt;type hint&lt;/strong&gt; - a way to make function signatures look more modern and semantically clear. Like this:&lt;/p&gt;&#xA;&lt;div class=&#34;code-block code-line-numbers open&#34; style=&#34;counter-reset: code-block 0&#34;&gt;&#xA;    &lt;div class=&#34;code-header language-python&#34;&gt;&#xA;        &lt;span class=&#34;code-title&#34;&gt;&lt;i class=&#34;arrow fas fa-angle-right fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;        &lt;span class=&#34;ellipses&#34;&gt;&lt;i class=&#34;fas fa-ellipsis-h fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;        &lt;span class=&#34;copy&#34; title=&#34;Copy to clipboard&#34;&gt;&lt;i class=&#34;far fa-copy fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;    &lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pathlib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;process_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;p&gt;It changed when I started building an application that handled user-uploaded documents. I had to create temporary folders, write intermediate files, manage output paths, and ensure directories existed before saving results. That&amp;rsquo;s when &lt;code&gt;Path&lt;/code&gt; went from &lt;em&gt;just a type hint&lt;/em&gt; to a core part of my file management logic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>All‚Äëin‚ÄëOne Python Package¬†Manager: UV!</title>
      <link>http://localhost:1313/uv-package-manager/</link>
      <pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/uv-package-manager/</guid>
      <description>&lt;h2 id=&#34;meet-uva-blazinglyfast-allinone-python-packagemanager&#34;&gt;Meet &lt;strong&gt;uv&lt;/strong&gt;¬†‚Äì¬†A Blazingly¬†Fast, All‚Äëin‚ÄëOne Python Package¬†Manager&lt;/h2&gt;&#xA;&lt;p&gt;In my last post I dove into &lt;strong&gt;&lt;a href=&#34;https://han8931.github.io/20240707_poetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;Poetry&lt;/a&gt;&lt;/strong&gt;, one of the best‚Äëloved modern packaging tools. However, Poetry is just one piece of an toolkit: we still reach for &lt;strong&gt;pip&lt;/strong&gt; to install packages, &lt;strong&gt;virtualenv&lt;/strong&gt; to isolate them, &lt;strong&gt;pyenv&lt;/strong&gt; to juggle Python versions, and maybe &lt;strong&gt;Pipenv&lt;/strong&gt; or &lt;strong&gt;pip‚Äëtools&lt;/strong&gt; for lock‚Äëfiles. Each solves its own niche, yet hopping between them adds friction. &lt;strong&gt;uv&lt;/strong&gt; removes that friction. This single, project manager‚Äîwritten in Rust and typically &lt;strong&gt;10-1000x&lt;/strong&gt; faster-replaces the whole stack: installing Python itself, creating virtual environments, resolving and locking dependencies, and even publishing to PyPI, all behind one concise CLI.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Abstract Classes or Protocols</title>
      <link>http://localhost:1313/python-protocol-abstract-classes/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/python-protocol-abstract-classes/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;When it comes to writing clean, maintainable, and scalable Python code, design matters. As your projects grow, you&amp;rsquo;ll often find yourself needing to enforce structure, ensure consistency, and promote reusability. This is where Python&amp;rsquo;s &lt;a href=&#34;https://docs.python.org/3/library/abc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;Abstract Base Classes (ABCs)&lt;/a&gt; and &lt;a href=&#34;https://www.python.org/dev/peps/pep-0544/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;Protocols&lt;/a&gt; come into play‚Äîtwo powerful features that help you design better software.&lt;/p&gt;&#xA;&lt;p&gt;Abstract classes act as &lt;strong&gt;blueprints for other classes, allowing you to define methods that must be implemented by any subclass&lt;/strong&gt;. They&amp;rsquo;re typically used for creating a shared foundation while enforcing a specific structure. Protocols, on the other hand, take a more flexible approach. Instead of relying on inheritance, they &lt;strong&gt;let you define interfaces based on behavior&lt;/strong&gt;, making them ideal for &lt;em&gt;duck typing&lt;/em&gt; (or &lt;em&gt;structural subtyping&lt;/em&gt;) and runtime flexibility.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Asyncio in Python: A Deep Dive into Asynchronous I/O</title>
      <link>http://localhost:1313/asyncio/</link>
      <pubDate>Sun, 05 Jan 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/asyncio/</guid>
      <description>&lt;p&gt;For the past few months, I&amp;rsquo;ve been working on an exciting internal project at my company: taking users&amp;rsquo; documents and running them through LLM APIs to translate and summarize their content, somewhat similar to &lt;a href=&#34;https://www.deepl.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;DeepL&lt;/a&gt;. The output is a collection of translated documents, each overlaid with the newly translated text. Our goal is to provide a stable service that can handle large files efficiently for thousands of employees at Samsung‚Äîno small task! To achieve this, we needed a concurrency strategy that supports high throughput while remaining responsive. &lt;strong&gt;That&amp;rsquo;s where Asyncio comes in.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependency Management in Python: Poetry</title>
      <link>http://localhost:1313/poetry/</link>
      <pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/poetry/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Poetry&lt;/strong&gt; is a dependency management and packaging tool in Python, aiming to improve how you define, install, and manage project dependencies.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Installation: You can install Poetry through its custom installer script or using package managers. The recommended way is to use their installer script to ensure you get the latest version.&lt;/li&gt;&#xA;&lt;li&gt;Creating a New Project: Use &lt;code&gt;poetry new &amp;lt;project-name&amp;gt;&lt;/code&gt; to create a new project with a standard layout.&lt;/li&gt;&#xA;&lt;li&gt;Adding Dependencies: Add new dependencies directly to your project using &lt;code&gt;poetry add &amp;lt;package&amp;gt;&lt;/code&gt;. Poetry will resolve the dependencies and update the &lt;code&gt;pyproject.toml&lt;/code&gt; and &lt;code&gt;poetry.lock&lt;/code&gt; files.&lt;/li&gt;&#xA;&lt;li&gt;Installing Dependencies: Running &lt;code&gt;poetry install&lt;/code&gt; in your project directory will install all dependencies defined in your &lt;code&gt;pyproject.toml&lt;/code&gt; file.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;poetry-example&#34;&gt;Poetry Example&lt;/h2&gt;&#xA;&lt;h3 id=&#34;setting-up-a-new-project&#34;&gt;Setting Up a New Project&lt;/h3&gt;&#xA;&lt;p&gt;To create a new project named &lt;code&gt;example_project&lt;/code&gt; with Poetry and manage its dependencies:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Use Python&#39;s `pdb` Debugger Over an IDE?</title>
      <link>http://localhost:1313/pdb/</link>
      <pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/pdb/</guid>
      <description>&lt;p&gt;When it comes to debugging Python code, most programmers reach for an Integrated Development Environment (IDE) because of its convenience and powerful features. However, there&amp;rsquo;s a classic, built-in tool that shouldn&amp;rsquo;t be overlooked: Python&amp;rsquo;s own debugger, &lt;code&gt;pdb&lt;/code&gt;. This tool might seem basic at first glance, but it offers some compelling advantages, especially in scenarios where an IDE might be less effective. Here&amp;rsquo;s why you might consider using &lt;code&gt;pdb&lt;/code&gt; for debugging your Python projects:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enumerate variables with Enum!</title>
      <link>http://localhost:1313/enum/</link>
      <pubDate>Fri, 26 Apr 2024 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/enum/</guid>
      <description>&lt;p&gt;&lt;code&gt;Enum&lt;/code&gt; is a way that Python enumerate variables. The &lt;code&gt;enum&lt;/code&gt; module allows for the creation of enumerated constants‚Äîunique, immutable data types that are useful for representing a fixed set of values. These values, which are usually related by their context, are known as enumeration members.&lt;/p&gt;&#xA;&lt;p&gt;Enum provides&amp;hellip;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Uniqueness&lt;/strong&gt; - Each member of an &lt;code&gt;Enum&lt;/code&gt; is unique within its definition, meaning no two members can have the same value. Attempting to define two members with the same value will result in an error unless you explicitly allow aliases.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Immutability&lt;/strong&gt; - Enum members are immutable. Once the &lt;code&gt;Enum&lt;/code&gt; class is defined, you cannot change the members or their values.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Iterability and Comparability&lt;/strong&gt; - Enum classes support iteration over their members and can be compared using identity and equality checks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Accessing Members&lt;/strong&gt; - You can access enumeration members by their names or values:&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Auto&lt;/strong&gt; - If you want to automatically assign values to enum members, you can use the &lt;code&gt;auto()&lt;/code&gt; function from the same module:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;code-block code-line-numbers open&#34; style=&#34;counter-reset: code-block 0&#34;&gt;&#xA;    &lt;div class=&#34;code-header language-python&#34;&gt;&#xA;        &lt;span class=&#34;code-title&#34;&gt;&lt;i class=&#34;arrow fas fa-angle-right fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;        &lt;span class=&#34;ellipses&#34;&gt;&lt;i class=&#34;fas fa-ellipsis-h fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;        &lt;span class=&#34;copy&#34; title=&#34;Copy to clipboard&#34;&gt;&lt;i class=&#34;far fa-copy fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;    &lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Enum&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;State&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Enum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;n&#34;&gt;PLAYING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;n&#34;&gt;PAUSED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;n&#34;&gt;GAME_OVER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;p&gt;If we just want to make sure them to be unique and automatically assigned, then use &lt;code&gt;auto()&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit Test with Pytest</title>
      <link>http://localhost:1313/unit-tests/</link>
      <pubDate>Fri, 26 Apr 2024 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/unit-tests/</guid>
      <description>&lt;p&gt;Unit testing involves testing individual components of software in &lt;strong&gt;isolation to ensure they function correctly&lt;/strong&gt;. Automated frameworks facilitate this process, which &lt;strong&gt;is integral to ensuring that new changes do not disrupt existing functionality&lt;/strong&gt;. Unit tests also serve as practical documentation and encourage better software design. This testing method boosts development speed and confidence by confirming component reliability before integration. Early bug detection through unit testing also helps minimize future repair costs and efforts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bash script tutorial</title>
      <link>http://localhost:1313/the-shell-script-tutorial/</link>
      <pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/the-shell-script-tutorial/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s create our first simple shell script&lt;/p&gt;&#xA;&lt;div class=&#34;code-block code-line-numbers open&#34; style=&#34;counter-reset: code-block 0&#34;&gt;&#xA;    &lt;div class=&#34;code-header language-sh&#34;&gt;&#xA;        &lt;span class=&#34;code-title&#34;&gt;&lt;i class=&#34;arrow fas fa-angle-right fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;        &lt;span class=&#34;ellipses&#34;&gt;&lt;i class=&#34;fas fa-ellipsis-h fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;        &lt;span class=&#34;copy&#34; title=&#34;Copy to clipboard&#34;&gt;&lt;i class=&#34;far fa-copy fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/span&gt;&#xA;    &lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# This is a comment!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; Hello World        &lt;span class=&#34;c1&#34;&gt;# This is a comment, too!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The first line tells Unix that the file is to be executed by &lt;code&gt;/bin/sh&lt;/code&gt;. This is the standard location of the &lt;em&gt;Bourne shell&lt;/em&gt; on just about every Unix system. If you&amp;rsquo;re using GNU/Linux, /bin/sh is normally a symbolic link to bash (or, more recently, dash).&lt;/li&gt;&#xA;&lt;li&gt;The second line begins with a special symbol: &lt;code&gt;#&lt;/code&gt;. This marks the line as a comment, and it is ignored completely by the shell.&lt;/li&gt;&#xA;&lt;li&gt;The only exception is when the &lt;em&gt;very first&lt;/em&gt; line of the file starts with &lt;code&gt;#!&lt;/code&gt; (shebang) - as ours does. This is a special directive which Unix treats specially. It means that even if you are using csh, ksh, or anything else as your interactive shell, that what follows should be interpreted by the Bourne shell.&lt;/li&gt;&#xA;&lt;li&gt;Similarly, a Perl script may start with the line &lt;code&gt;#!/usr/bin/perl&lt;/code&gt; to tell your interactive shell that the program which follows should be executed by perl. For Bourne shell programming, we shall stick to &lt;code&gt;#!/bin/sh.&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The third line runs a command: &lt;code&gt;echo&lt;/code&gt;, with two parameters, or arguments - the first is &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;; the second is &lt;code&gt;&amp;quot;World&amp;quot;&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Note that &lt;code&gt;echo&lt;/code&gt; will automatically put a single space between its parameters.&lt;/li&gt;&#xA;&lt;li&gt;To make it executable, run &lt;code&gt;chmod +rx &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s look back at our first Hello World example. This could be done using variables. Note that &lt;em&gt;there must be no spaces around the &amp;ldquo;&lt;code&gt;=&lt;/code&gt;&amp;rdquo; sign&lt;/em&gt;: &lt;code&gt;VAR=value&lt;/code&gt; works; &lt;code&gt;VAR = value&lt;/code&gt; doesn&amp;rsquo;t work. In the first case, the shell sees the &amp;ldquo;&lt;code&gt;=&lt;/code&gt;&amp;rdquo; symbol and treats the command as a variable assignment. In the second case, the shell assumes that VAR must be the name of a command and tries to execute it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to keep sensitive data in Python?</title>
      <link>http://localhost:1313/hide-sensitive-data/</link>
      <pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/hide-sensitive-data/</guid>
      <description>&lt;p&gt;An app&amp;rsquo;s &lt;em&gt;config&lt;/em&gt; is everything that is likely to vary between &lt;a href=&#34;https://12factor.net/codebase&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;deploys&lt;/a&gt; (staging, production, developer environments, etc). This includes:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Resource handles to the database, Memcached, and other &lt;a href=&#34;https://12factor.net/backing-services&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;backing services&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Credentials to external services such as Amazon S3 or Twitter&lt;/li&gt;&#xA;&lt;li&gt;Per-deploy values such as the canonical hostname for the deploy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Apps sometimes store config as constants in the code. This is a violation of twelve-factor, which requires &lt;strong&gt;strict separation of config from code&lt;/strong&gt;. Config varies substantially across deploys, code does not.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type hint in Python</title>
      <link>http://localhost:1313/type-hint/</link>
      <pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/type-hint/</guid>
      <description>&lt;p&gt;Type hinting is &lt;em&gt;not mandatory&lt;/em&gt;, but it can make your code easier to understand and debug by&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Improved readability&lt;/li&gt;&#xA;&lt;li&gt;Better IDE support: IDEs and linters can use type hints to check your code for potential errors before runtime.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;While type hints can be simple classes like &lt;a href=&#34;https://docs.python.org/3/library/functions.html#float&#34; title=&#34;float&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#str&#34; title=&#34;str&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, they can also be more complex. The &lt;a href=&#34;https://docs.python.org/3/library/typing.html#module-typing&#34; title=&#34;typing: Support for type hints (see :pep:`484`).&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;&lt;code&gt;typing&lt;/code&gt;&lt;/a&gt; module provides a vocabulary of more advanced type hints.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
