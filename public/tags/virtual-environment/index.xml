<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Virtual Environment - Tag - Han&#39;s XYZ</title>
        <link>http://localhost:1313/tags/virtual-environment/</link>
        <description>Virtual Environment - Tag - Han&#39;s XYZ</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tabularasa8931@gmail.com (Han)</managingEditor>
            <webMaster>tabularasa8931@gmail.com (Han)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 13 Apr 2025 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/virtual-environment/" rel="self" type="application/rss+xml" /><item>
    <title>All‑in‑One Python Package Manager: UV!</title>
    <link>http://localhost:1313/20250413_uv_package_manager/</link>
    <pubDate>Sun, 13 Apr 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250413_uv_package_manager/</guid>
    <description><![CDATA[<h2 id="meet-uva-blazinglyfast-allinone-python-packagemanager">Meet <strong>uv</strong> – A Blazingly Fast, All‑in‑One Python Package Manager</h2>
<p>In my last post I dove into <strong><a href="https://han8931.github.io/20240707_poetry/" target="_blank" rel="noopener noreffer">Poetry</a>
</strong>, one of the best‑loved modern packaging tools. However, Poetry is just one piece of an toolkit: we still reach for <strong>pip</strong> to install packages, <strong>virtualenv</strong> to isolate them, <strong>pyenv</strong> to juggle Python versions, and maybe <strong>Pipenv</strong> or <strong>pip‑tools</strong> for lock‑files. Each solves its own niche, yet hopping between them adds friction. <strong>uv</strong> removes that friction. This single, project manager—written in Rust and typically <strong>10-1000x</strong> faster-replaces the whole stack: installing Python itself, creating virtual environments, resolving and locking dependencies, and even publishing to PyPI, all behind one concise CLI.</p>]]></description>
</item>
<item>
    <title>Dependency Management in Python: Poetry</title>
    <link>http://localhost:1313/20240707_poetry/</link>
    <pubDate>Sun, 07 Jul 2024 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20240707_poetry/</guid>
    <description><![CDATA[<h1 id="introduction">Introduction</h1>
<p><strong>Poetry</strong> is a dependency management and packaging tool in Python, aiming to improve how you define, install, and manage project dependencies.</p>
<ol>
<li>Installation: You can install Poetry through its custom installer script or using package managers. The recommended way is to use their installer script to ensure you get the latest version.</li>
<li>Creating a New Project: Use <code>poetry new &lt;project-name&gt;</code> to create a new project with a standard layout.</li>
<li>Adding Dependencies: Add new dependencies directly to your project using <code>poetry add &lt;package&gt;</code>. Poetry will resolve the dependencies and update the <code>pyproject.toml</code> and <code>poetry.lock</code> files.</li>
<li>Installing Dependencies: Running <code>poetry install</code> in your project directory will install all dependencies defined in your <code>pyproject.toml</code> file.</li>
</ol>
<h2 id="poetry-example">Poetry Example</h2>
<h3 id="setting-up-a-new-project">Setting Up a New Project</h3>
<p>To create a new project named <code>example_project</code> with Poetry and manage its dependencies:</p>]]></description>
</item>
</channel>
</rss>
