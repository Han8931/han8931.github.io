<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Han&#39;s XYZ</title>
    <link>http://localhost:1313/categories/programming/</link>
    <description>Recent content in Programming on Han&#39;s XYZ</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>tabularasa8931@gmail.com (Han)</managingEditor>
    <webMaster>tabularasa8931@gmail.com (Han)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 17 May 2025 10:36:47 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to logging in Python</title>
      <link>http://localhost:1313/20250517_python_logging/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250517_python_logging/</guid>
      <description>&lt;h2 id=&#34;a-gentle-practical-introduction-to-logging-in-python&#34;&gt;A gentle, practical introduction to &lt;code&gt;logging&lt;/code&gt; in Python&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;why-bother-with-a-dedicated-logging-library&#34;&gt;Why bother with a dedicated logging library?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Prints don’t scale.&lt;/strong&gt; &lt;code&gt;print()&lt;/code&gt; is fine during quick experiments, but real programs need a record that can be filtered, rotated, or shipped elsewhere.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Separation of concerns.&lt;/strong&gt; You decide &lt;em&gt;what&lt;/em&gt; to log in your code; &lt;code&gt;logging&lt;/code&gt; decides &lt;em&gt;where&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; to write it (console, file, etc.).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Built-in, no extra dependency.&lt;/strong&gt; The standard library’s &lt;code&gt;logging&lt;/code&gt; module is powerful enough for most applications.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;core-concepts&#34;&gt;Core concepts&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Concept&lt;/th&gt;&#xA;          &lt;th&gt;Role in the ecosystem&lt;/th&gt;&#xA;          &lt;th&gt;Typical examples&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Logger&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The entry point your code calls (&lt;code&gt;logger.info(...)&lt;/code&gt;). You can have many, one per module.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;&amp;quot;__main__&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;my_package.worker&amp;quot;&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Handler&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Decides &lt;em&gt;where&lt;/em&gt; the record goes.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;StreamHandler&lt;/code&gt; (stdout), &lt;code&gt;FileHandler&lt;/code&gt;, &lt;code&gt;TimedRotatingFileHandler&lt;/code&gt;, &lt;code&gt;SMTPHandler&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Formatter&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Decides &lt;em&gt;how&lt;/em&gt; the record looks.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;&#39;%(asctime)s - %(levelname)s - %(name)s - %(message)s&#39;&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;a-minimal-logger&#34;&gt;A minimal logger&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;logging&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;logging&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;basicConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logging&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INFO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%(levelname)s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; | &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%(message)s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;logging&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;basicConfig&lt;/code&gt; is a one-liner good for small scripts.&lt;/li&gt;&#xA;&lt;li&gt;In bigger projects, mixing multiple modules / log files, you&amp;rsquo;ll want finer control.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;rotating-files-at-midnight&#34;&gt;Rotating files at midnight&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Rotating a log file means creating a new log file after a certain time or size limit is reached&lt;/strong&gt;. In this case, a new file is created every night at midnight. Only the most recent two log files are kept—yesterday&amp;rsquo;s and today’s—while older ones are deleted automatically.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rediscovering Python&#39;s Pathlib</title>
      <link>http://localhost:1313/20250517_pathlib/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250517_pathlib/</guid>
      <description>&lt;h2 id=&#34;from-type-hint-to-power-tool--pythons-pathlib&#34;&gt;From Type Hint to Power Tool:  Python&amp;rsquo;s &lt;code&gt;Pathlib&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;For a long time, I used &lt;code&gt;Path&lt;/code&gt; from Python&amp;rsquo;s &lt;code&gt;pathlib&lt;/code&gt; module purely as a &lt;strong&gt;type hint&lt;/strong&gt; - a way to make function signatures look more modern and semantically clear. Like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pathlib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;process_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;It changed when I started building an application that handled user-uploaded documents. I had to create temporary folders, write intermediate files, manage output paths, and ensure directories existed before saving results. That&amp;rsquo;s when &lt;code&gt;Path&lt;/code&gt; went from &lt;em&gt;just a type hint&lt;/em&gt; to a core part of my file management logic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>All‑in‑One Python Package Manager: UV!</title>
      <link>http://localhost:1313/20250413_uv_package_manager/</link>
      <pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250413_uv_package_manager/</guid>
      <description>&lt;h2 id=&#34;meet-uva-blazinglyfast-allinone-python-packagemanager&#34;&gt;Meet &lt;strong&gt;uv&lt;/strong&gt; – A Blazingly Fast, All‑in‑One Python Package Manager&lt;/h2&gt;&#xA;&lt;p&gt;In my last post I dove into &lt;strong&gt;&lt;a href=&#34;https://han8931.github.io/20240707_poetry/&#34;&gt;Poetry&lt;/a&gt;&lt;/strong&gt;, one of the best‑loved modern packaging tools. However, Poetry is just one piece of an toolkit: we still reach for &lt;strong&gt;pip&lt;/strong&gt; to install packages, &lt;strong&gt;virtualenv&lt;/strong&gt; to isolate them, &lt;strong&gt;pyenv&lt;/strong&gt; to juggle Python versions, and maybe &lt;strong&gt;Pipenv&lt;/strong&gt; or &lt;strong&gt;pip‑tools&lt;/strong&gt; for lock‑files. Each solves its own niche, yet hopping between them adds friction. &lt;strong&gt;uv&lt;/strong&gt; removes that friction. This single, project manager—written in Rust and typically &lt;strong&gt;10-1000x&lt;/strong&gt; faster-replaces the whole stack: installing Python itself, creating virtual environments, resolving and locking dependencies, and even publishing to PyPI, all behind one concise CLI.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git with Vim Fugitive: A Streamlined Workflow</title>
      <link>http://localhost:1313/20250413_vim_fugitive/</link>
      <pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250413_vim_fugitive/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re working with Git and Vim, &lt;a href=&#34;https://github.com/tpope/vim-fugitive&#34;&gt;&lt;strong&gt;vim-fugitive&lt;/strong&gt;&lt;/a&gt; is an essential plugin that transforms your editor into a full-fledged Git interface. Here&amp;rsquo;s how I use Fugitive to review, stage, and commit changes—without ever leaving Vim.&lt;/p&gt;&#xA;&lt;h2 id=&#34;browsing-git-history-and-logs-first&#34;&gt;Browsing Git History and Logs First&lt;/h2&gt;&#xA;&lt;p&gt;Before jumping into edits, it’s often useful to understand the file’s history or recent project changes.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;:Git log&lt;/code&gt; — shows the project’s commit history in reverse chronological order&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;:0Gllog&lt;/code&gt; — shows the history of the current file&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;To explore who changed what in a file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Abstract Classes or Protocols</title>
      <link>http://localhost:1313/20250128_python_protocol_abstract_classes/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250128_python_protocol_abstract_classes/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;When it comes to writing clean, maintainable, and scalable Python code, design matters. As your projects grow, you&amp;rsquo;ll often find yourself needing to enforce structure, ensure consistency, and promote reusability. This is where Python&amp;rsquo;s &lt;a href=&#34;https://docs.python.org/3/library/abc.html&#34;&gt;Abstract Base Classes (ABCs)&lt;/a&gt; and &lt;a href=&#34;https://www.python.org/dev/peps/pep-0544/&#34;&gt;Protocols&lt;/a&gt; come into play—two powerful features that help you design better software.&lt;/p&gt;&#xA;&lt;p&gt;Abstract classes act as &lt;strong&gt;blueprints for other classes, allowing you to define methods that must be implemented by any subclass&lt;/strong&gt;. They&amp;rsquo;re typically used for creating a shared foundation while enforcing a specific structure. Protocols, on the other hand, take a more flexible approach. Instead of relying on inheritance, they &lt;strong&gt;let you define interfaces based on behavior&lt;/strong&gt;, making them ideal for &lt;em&gt;duck typing&lt;/em&gt; (or &lt;em&gt;structural subtyping&lt;/em&gt;) and runtime flexibility.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Run Pytorch Container in Arch Linux</title>
      <link>http://localhost:1313/20250111_pytorch_container/</link>
      <pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250111_pytorch_container/</guid>
      <description>&lt;h1 id=&#34;setting-up-dl-experiment-environments&#34;&gt;Setting Up DL Experiment Environments&lt;/h1&gt;&#xA;&lt;h2 id=&#34;a-challenge-for-arch-linux-users&#34;&gt;A Challenge for Arch Linux Users&lt;/h2&gt;&#xA;&lt;p&gt;If you&amp;rsquo;ve ever tried to set up a new experiment environment for deep learning on Arch Linux, you&amp;rsquo;re probably familiar with the challenges involved. Arch Linux, renowned for its rolling-release model and cutting-edge updates, provides unparalleled flexibility and control over your system. However, this same flexibility can often lead to headaches when setting up complex environments for machine learning or deep learning experiments. Dependency conflicts, missing libraries, and version mismatches are all too common.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Asyncio in Python: A Deep Dive into Asynchronous I/O</title>
      <link>http://localhost:1313/20250105_asyncio/</link>
      <pubDate>Sun, 05 Jan 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250105_asyncio/</guid>
      <description>&lt;p&gt;For the past few months, I&amp;rsquo;ve been working on an exciting internal project at my company: taking users&amp;rsquo; documents and running them through LLM APIs to translate and summarize their content, somewhat similar to &lt;a href=&#34;https://www.deepl.com/&#34;&gt;DeepL&lt;/a&gt;. The output is a collection of translated documents, each overlaid with the newly translated text. Our goal is to provide a stable service that can handle large files efficiently for thousands of employees at Samsung—no small task! To achieve this, we needed a concurrency strategy that supports high throughput while remaining responsive. &lt;strong&gt;That&amp;rsquo;s where Asyncio comes in.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bash script tutorial</title>
      <link>http://localhost:1313/20240421_the-shell-script-tutorial/</link>
      <pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20240421_the-shell-script-tutorial/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s create our first simple shell script&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# This is a comment!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; Hello World        &lt;span class=&#34;c1&#34;&gt;# This is a comment, too!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;The first line tells Unix that the file is to be executed by &lt;code&gt;/bin/sh&lt;/code&gt;. This is the standard location of the &lt;em&gt;Bourne shell&lt;/em&gt; on just about every Unix system. If you&amp;rsquo;re using GNU/Linux, /bin/sh is normally a symbolic link to bash (or, more recently, dash).&lt;/li&gt;&#xA;&lt;li&gt;The second line begins with a special symbol: &lt;code&gt;#&lt;/code&gt;. This marks the line as a comment, and it is ignored completely by the shell.&lt;/li&gt;&#xA;&lt;li&gt;The only exception is when the &lt;em&gt;very first&lt;/em&gt; line of the file starts with &lt;code&gt;#!&lt;/code&gt; (shebang) - as ours does. This is a special directive which Unix treats specially. It means that even if you are using csh, ksh, or anything else as your interactive shell, that what follows should be interpreted by the Bourne shell.&lt;/li&gt;&#xA;&lt;li&gt;Similarly, a Perl script may start with the line &lt;code&gt;#!/usr/bin/perl&lt;/code&gt; to tell your interactive shell that the program which follows should be executed by perl. For Bourne shell programming, we shall stick to &lt;code&gt;#!/bin/sh.&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The third line runs a command: &lt;code&gt;echo&lt;/code&gt;, with two parameters, or arguments - the first is &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;; the second is &lt;code&gt;&amp;quot;World&amp;quot;&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Note that &lt;code&gt;echo&lt;/code&gt; will automatically put a single space between its parameters.&lt;/li&gt;&#xA;&lt;li&gt;To make it executable, run &lt;code&gt;chmod +rx &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s look back at our first Hello World example. This could be done using variables. Note that &lt;em&gt;there must be no spaces around the &amp;ldquo;&lt;code&gt;=&lt;/code&gt;&amp;rdquo; sign&lt;/em&gt;: &lt;code&gt;VAR=value&lt;/code&gt; works; &lt;code&gt;VAR = value&lt;/code&gt; doesn&amp;rsquo;t work. In the first case, the shell sees the &amp;ldquo;&lt;code&gt;=&lt;/code&gt;&amp;rdquo; symbol and treats the command as a variable assignment. In the second case, the shell assumes that VAR must be the name of a command and tries to execute it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
