<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Han&#39;s XYZ</title>
    <link>http://localhost:1313/categories/programming/</link>
    <description>Recent content in Programming on Han&#39;s XYZ</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>tabularasa8931@gmail.com (Han)</managingEditor>
    <webMaster>tabularasa8931@gmail.com (Han)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 13 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>All‑in‑One Python Package Manager: UV!</title>
      <link>http://localhost:1313/20250413_uv_package_manager/</link>
      <pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250413_uv_package_manager/</guid>
      <description>&lt;h1 id=&#34;meet-uva-blazinglyfast-allinone-python-packagemanager&#34;&gt;Meet &lt;strong&gt;uv&lt;/strong&gt; – A Blazingly Fast, All‑in‑One Python Package Manager&lt;/h1&gt;&#xA;&lt;p&gt;In my last post I dove into &lt;strong&gt;&lt;a href=&#34;https://github.com/Han8931/deep_statistical_learning&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Poetry&lt;/a&gt;&#xA;!)&lt;/strong&gt;, one of the best‑loved modern packaging tools. However, Poetry is just one piece of an toolkit: we still reach for &lt;strong&gt;pip&lt;/strong&gt; to install packages, &lt;strong&gt;virtualenv&lt;/strong&gt; to isolate them, &lt;strong&gt;pyenv&lt;/strong&gt; to juggle Python versions, and maybe &lt;strong&gt;Pipenv&lt;/strong&gt; or &lt;strong&gt;pip‑tools&lt;/strong&gt; for lock‑files.  Each solves its own niche brilliantly, yet hopping between them adds friction.  &lt;strong&gt;uv&lt;/strong&gt; removes that friction.  This single, static binary—written in Rust and typically &lt;strong&gt;10-1000x&lt;/strong&gt; faster-replaces the whole stack: installing Python itself, creating virtual environments, resolving and locking dependencies, building wheels, and even publishing to PyPI, all behind one concise CLI.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Abstract Classes or Protocols</title>
      <link>http://localhost:1313/20250128_python_protocol_abstract_classes/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250128_python_protocol_abstract_classes/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;When it comes to writing clean, maintainable, and scalable Python code, design matters. As your projects grow, you&amp;rsquo;ll often find yourself needing to enforce structure, ensure consistency, and promote reusability. This is where Python&amp;rsquo;s &lt;a href=&#34;https://docs.python.org/3/library/abc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Abstract Base Classes (ABCs)&lt;/a&gt;&#xA; and &lt;a href=&#34;https://www.python.org/dev/peps/pep-0544/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Protocols&lt;/a&gt;&#xA; come into play—two powerful features that help you design better software.&lt;/p&gt;&#xA;&lt;p&gt;Abstract classes act as &lt;strong&gt;blueprints for other classes, allowing you to define methods that must be implemented by any subclass&lt;/strong&gt;. They&amp;rsquo;re typically used for creating a shared foundation while enforcing a specific structure. Protocols, on the other hand, take a more flexible approach. Instead of relying on inheritance, they &lt;strong&gt;let you define interfaces based on behavior&lt;/strong&gt;, making them ideal for &lt;em&gt;duck typing&lt;/em&gt; (or &lt;em&gt;structural subtyping&lt;/em&gt;) and runtime flexibility.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Run Pytorch Container in Arch Linux</title>
      <link>http://localhost:1313/20250111_pytorch_container/</link>
      <pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250111_pytorch_container/</guid>
      <description>&lt;h1 id=&#34;setting-up-dl-experiment-environments&#34;&gt;Setting Up DL Experiment Environments&lt;/h1&gt;&#xA;&lt;h2 id=&#34;a-challenge-for-arch-linux-users&#34;&gt;A Challenge for Arch Linux Users&lt;/h2&gt;&#xA;&lt;p&gt;If you&amp;rsquo;ve ever tried to set up a new experiment environment for deep learning on Arch Linux, you&amp;rsquo;re probably familiar with the challenges involved. Arch Linux, renowned for its rolling-release model and cutting-edge updates, provides unparalleled flexibility and control over your system. However, this same flexibility can often lead to headaches when setting up complex environments for machine learning or deep learning experiments. Dependency conflicts, missing libraries, and version mismatches are all too common.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Asyncio in Python: A Deep Dive into Asynchronous I/O</title>
      <link>http://localhost:1313/20250105_asyncio/</link>
      <pubDate>Sun, 05 Jan 2025 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20250105_asyncio/</guid>
      <description>&lt;p&gt;For the past few months, I&amp;rsquo;ve been working on an exciting internal project at my company: taking users&amp;rsquo; documents and running them through LLM APIs to translate and summarize their content, somewhat similar to &lt;a href=&#34;https://www.deepl.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;DeepL&lt;/a&gt;&#xA;. The output is a collection of translated documents, each overlaid with the newly translated text. Our goal is to provide a stable service that can handle large files efficiently for thousands of employees at Samsung—no small task! To achieve this, we needed a concurrency strategy that supports high throughput while remaining responsive. &lt;strong&gt;That&amp;rsquo;s where Asyncio comes in.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bash script tutorial</title>
      <link>http://localhost:1313/20240421_the-shell-script-tutorial/</link>
      <pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><author>tabularasa8931@gmail.com (Han)</author>
      <guid>http://localhost:1313/20240421_the-shell-script-tutorial/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s create our first simple shell script&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# This is a comment!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; Hello World        &lt;span class=&#34;c1&#34;&gt;# This is a comment, too!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;The first line tells Unix that the file is to be executed by &lt;code&gt;/bin/sh&lt;/code&gt;. This is the standard location of the &lt;em&gt;Bourne shell&lt;/em&gt; on just about every Unix system. If you&amp;rsquo;re using GNU/Linux, /bin/sh is normally a symbolic link to bash (or, more recently, dash).&lt;/li&gt;&#xA;&lt;li&gt;The second line begins with a special symbol: &lt;code&gt;#&lt;/code&gt;. This marks the line as a comment, and it is ignored completely by the shell.&lt;/li&gt;&#xA;&lt;li&gt;The only exception is when the &lt;em&gt;very first&lt;/em&gt; line of the file starts with &lt;code&gt;#!&lt;/code&gt; (shebang) - as ours does. This is a special directive which Unix treats specially. It means that even if you are using csh, ksh, or anything else as your interactive shell, that what follows should be interpreted by the Bourne shell.&lt;/li&gt;&#xA;&lt;li&gt;Similarly, a Perl script may start with the line &lt;code&gt;#!/usr/bin/perl&lt;/code&gt; to tell your interactive shell that the program which follows should be executed by perl. For Bourne shell programming, we shall stick to &lt;code&gt;#!/bin/sh.&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The third line runs a command: &lt;code&gt;echo&lt;/code&gt;, with two parameters, or arguments - the first is &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;; the second is &lt;code&gt;&amp;quot;World&amp;quot;&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Note that &lt;code&gt;echo&lt;/code&gt; will automatically put a single space between its parameters.&lt;/li&gt;&#xA;&lt;li&gt;To make it executable, run &lt;code&gt;chmod +rx &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s look back at our first Hello World example. This could be done using variables. Note that &lt;em&gt;there must be no spaces around the &amp;ldquo;&lt;code&gt;=&lt;/code&gt;&amp;rdquo; sign&lt;/em&gt;: &lt;code&gt;VAR=value&lt;/code&gt; works; &lt;code&gt;VAR = value&lt;/code&gt; doesn&amp;rsquo;t work. In the first case, the shell sees the &amp;ldquo;&lt;code&gt;=&lt;/code&gt;&amp;rdquo; symbol and treats the command as a variable assignment. In the second case, the shell assumes that VAR must be the name of a command and tries to execute it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
