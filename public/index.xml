<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Han&#39;s XYZ</title>
        <link>http://localhost:1313/</link>
        <description>Han&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tabularasa8931@gmail.com (Han)</managingEditor>
            <webMaster>tabularasa8931@gmail.com (Han)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 24 May 2025 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Managing Password using Pass</title>
    <link>http://localhost:1313/pass/</link>
    <pubDate>Sat, 24 May 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/pass/</guid>
    <description><![CDATA[<h1 id="a-minimalists-guide-to-pass-the-unix-password-manager">A Minimalist’s Guide to <strong>pass</strong>— the Unix Password Manager</h1>
<p><em>Safely wrangle your secrets from the command-line using GPG encryption and a few intuitive commands.</em></p>
<hr>
<h2 id="1-why-pass">1. Why <em>pass</em>?</h2>
<ul>
<li><strong>Single-purpose &amp; transparent</strong> – every secret is just a GPG-encrypted file in <code>~/.password-store/</code>.</li>
<li><strong>Leverages tools you already trust</strong> – GnuPG for encryption and standard Unix commands for everything else (grep, git, find, etc.).</li>
<li><strong>Portable &amp; scriptable</strong> – works the same on any POSIX shell and is easy to automate.</li>
</ul>
<blockquote>
<p><strong>Prerequisites</strong></p>]]></description>
</item>
<item>
    <title>Introduction to logging in Python</title>
    <link>http://localhost:1313/20250517_python_logging/</link>
    <pubDate>Sat, 17 May 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250517_python_logging/</guid>
    <description><![CDATA[<h2 id="a-gentle-practical-introduction-to-logging-in-python">A gentle, practical introduction to <code>logging</code> in Python</h2>
<hr>
<h3 id="why-bother-with-a-dedicated-logging-library">Why bother with a dedicated logging library?</h3>
<ul>
<li><strong>Prints don’t scale.</strong> <code>print()</code> is fine during quick experiments, but real programs need a record that can be filtered, rotated, or shipped elsewhere.</li>
<li><strong>Separation of concerns.</strong> You decide <em>what</em> to log in your code; <code>logging</code> decides <em>where</em> and <em>how</em> to write it (console, file, etc.).</li>
<li><strong>Built-in, no extra dependency.</strong> The standard library’s <code>logging</code> module is powerful enough for most applications.</li>
</ul>
<hr>
<h3 id="core-concepts">Core concepts</h3>
<table>
  <thead>
      <tr>
          <th>Concept</th>
          <th>Role in the ecosystem</th>
          <th>Typical examples</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Logger</strong></td>
          <td>The entry point your code calls (<code>logger.info(...)</code>). You can have many, one per module.</td>
          <td><code>&quot;__main__&quot;</code>, <code>&quot;my_package.worker&quot;</code></td>
      </tr>
      <tr>
          <td><strong>Handler</strong></td>
          <td>Decides <em>where</em> the record goes.</td>
          <td><code>StreamHandler</code> (stdout), <code>FileHandler</code>, <code>TimedRotatingFileHandler</code>, <code>SMTPHandler</code></td>
      </tr>
      <tr>
          <td><strong>Formatter</strong></td>
          <td>Decides <em>how</em> the record looks.</td>
          <td><code>'%(asctime)s - %(levelname)s - %(name)s - %(message)s'</code></td>
      </tr>
  </tbody>
</table>
<h3 id="a-minimal-logger">A minimal logger</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nb">format</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">%(levelname)s</span><span class="s2"> | </span><span class="si">%(message)s</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Hello, world!&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>basicConfig</code> is a one-liner good for small scripts.</li>
<li>In bigger projects, mixing multiple modules / log files, you&rsquo;ll want finer control.</li>
</ul>
<hr>
<h3 id="rotating-files-at-midnight">Rotating files at midnight</h3>
<p><strong>Rotating a log file means creating a new log file after a certain time or size limit is reached</strong>. In this case, a new file is created every night at midnight. Only the most recent two log files are kept—yesterday&rsquo;s and today’s—while older ones are deleted automatically.</p>]]></description>
</item>
<item>
    <title>Rediscovering Python&#39;s Pathlib</title>
    <link>http://localhost:1313/20250517_pathlib/</link>
    <pubDate>Sat, 17 May 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250517_pathlib/</guid>
    <description><![CDATA[<h2 id="from-type-hint-to-power-tool--pythons-pathlib">From Type Hint to Power Tool:  Python&rsquo;s <code>Pathlib</code></h2>
<p>For a long time, I used <code>Path</code> from Python&rsquo;s <code>pathlib</code> module purely as a <strong>type hint</strong> - a way to make function signatures look more modern and semantically clear. Like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">process_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It changed when I started building an application that handled user-uploaded documents. I had to create temporary folders, write intermediate files, manage output paths, and ensure directories existed before saving results. That&rsquo;s when <code>Path</code> went from <em>just a type hint</em> to a core part of my file management logic.</p>]]></description>
</item>
<item>
    <title>All‑in‑One Python Package Manager: UV!</title>
    <link>http://localhost:1313/20250413_uv_package_manager/</link>
    <pubDate>Sun, 13 Apr 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250413_uv_package_manager/</guid>
    <description><![CDATA[<h2 id="meet-uva-blazinglyfast-allinone-python-packagemanager">Meet <strong>uv</strong> – A Blazingly Fast, All‑in‑One Python Package Manager</h2>
<p>In my last post I dove into <strong><a href="https://han8931.github.io/20240707_poetry/" target="_blank" rel="noopener noreffer">Poetry</a>
</strong>, one of the best‑loved modern packaging tools. However, Poetry is just one piece of an toolkit: we still reach for <strong>pip</strong> to install packages, <strong>virtualenv</strong> to isolate them, <strong>pyenv</strong> to juggle Python versions, and maybe <strong>Pipenv</strong> or <strong>pip‑tools</strong> for lock‑files. Each solves its own niche, yet hopping between them adds friction. <strong>uv</strong> removes that friction. This single, project manager—written in Rust and typically <strong>10-1000x</strong> faster-replaces the whole stack: installing Python itself, creating virtual environments, resolving and locking dependencies, and even publishing to PyPI, all behind one concise CLI.</p>]]></description>
</item>
<item>
    <title>Git with Vim Fugitive: A Streamlined Workflow</title>
    <link>http://localhost:1313/20250413_vim_fugitive/</link>
    <pubDate>Sun, 13 Apr 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250413_vim_fugitive/</guid>
    <description><![CDATA[<p>If you&rsquo;re working with Git and Vim, <a href="https://github.com/tpope/vim-fugitive" target="_blank" rel="noopener noreffer"><strong>vim-fugitive</strong></a>
 is an essential plugin that transforms your editor into a full-fledged Git interface. Here&rsquo;s how I use Fugitive to review, stage, and commit changes—without ever leaving Vim.</p>
<h2 id="browsing-git-history-and-logs-first">Browsing Git History and Logs First</h2>
<p>Before jumping into edits, it’s often useful to understand the file’s history or recent project changes.</p>
<ul>
<li><code>:Git log</code> — shows the project’s commit history in reverse chronological order</li>
<li><code>:0Gllog</code> — shows the history of the current file</li>
</ul>
<p>To explore who changed what in a file:</p>]]></description>
</item>
<item>
    <title>Inside DeepSeek-R1</title>
    <link>http://localhost:1313/20250214_deepseek_inside/</link>
    <pubDate>Fri, 14 Feb 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250214_deepseek_inside/</guid>
    <description><![CDATA[<p><a href="https://www.deepseek.com/" target="_blank" rel="noopener noreffer">DeepSeek</a>
&rsquo;s latest moves have sent ripples through the AI community. Not only has it marked the beginning of a new era in artificial intelligence, but it has also made significant contributions to the open-source AI landscape. Their engineering techniques behind DeepSeek are truly impressive, and their reports are quite enjoyable. However, understanding their core ideas can be challenging and demands a substantial amount of effort.</p>
<p>At the forefront of this innovation is DeepSeek-R1, a model that built upon the foundation established by preceding projects such as DeepSeek Coder, Math, MoE, and notably, the DeepSeek-V3 model. While DeepSeek-R1 is the center of the DeepSeek&rsquo;s frenzy, its success is rooted on these past works.</p>]]></description>
</item>
<item>
    <title>Abstract Classes or Protocols</title>
    <link>http://localhost:1313/20250128_python_protocol_abstract_classes/</link>
    <pubDate>Tue, 28 Jan 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250128_python_protocol_abstract_classes/</guid>
    <description><![CDATA[<h1 id="introduction">Introduction</h1>
<p>When it comes to writing clean, maintainable, and scalable Python code, design matters. As your projects grow, you&rsquo;ll often find yourself needing to enforce structure, ensure consistency, and promote reusability. This is where Python&rsquo;s <a href="https://docs.python.org/3/library/abc.html" target="_blank" rel="noopener noreffer">Abstract Base Classes (ABCs)</a>
 and <a href="https://www.python.org/dev/peps/pep-0544/" target="_blank" rel="noopener noreffer">Protocols</a>
 come into play—two powerful features that help you design better software.</p>
<p>Abstract classes act as <strong>blueprints for other classes, allowing you to define methods that must be implemented by any subclass</strong>. They&rsquo;re typically used for creating a shared foundation while enforcing a specific structure. Protocols, on the other hand, take a more flexible approach. Instead of relying on inheritance, they <strong>let you define interfaces based on behavior</strong>, making them ideal for <em>duck typing</em> (or <em>structural subtyping</em>) and runtime flexibility.</p>]]></description>
</item>
<item>
    <title>Run Pytorch Container in Arch Linux</title>
    <link>http://localhost:1313/20250111_pytorch_container/</link>
    <pubDate>Sat, 11 Jan 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250111_pytorch_container/</guid>
    <description><![CDATA[<h1 id="setting-up-dl-experiment-environments">Setting Up DL Experiment Environments</h1>
<h2 id="a-challenge-for-arch-linux-users">A Challenge for Arch Linux Users</h2>
<p>If you&rsquo;ve ever tried to set up a new experiment environment for deep learning on Arch Linux, you&rsquo;re probably familiar with the challenges involved. Arch Linux, renowned for its rolling-release model and cutting-edge updates, provides unparalleled flexibility and control over your system. However, this same flexibility can often lead to headaches when setting up complex environments for machine learning or deep learning experiments. Dependency conflicts, missing libraries, and version mismatches are all too common.</p>]]></description>
</item>
<item>
    <title>Asyncio in Python: A Deep Dive into Asynchronous I/O</title>
    <link>http://localhost:1313/20250105_asyncio/</link>
    <pubDate>Sun, 05 Jan 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250105_asyncio/</guid>
    <description><![CDATA[<p>For the past few months, I&rsquo;ve been working on an exciting internal project at my company: taking users&rsquo; documents and running them through LLM APIs to translate and summarize their content, somewhat similar to <a href="https://www.deepl.com/" target="_blank" rel="noopener noreffer">DeepL</a>
. The output is a collection of translated documents, each overlaid with the newly translated text. Our goal is to provide a stable service that can handle large files efficiently for thousands of employees at Samsung—no small task! To achieve this, we needed a concurrency strategy that supports high throughput while remaining responsive. <strong>That&rsquo;s where Asyncio comes in.</strong></p>]]></description>
</item>
<item>
    <title>Install Arch Linux</title>
    <link>http://localhost:1313/20250105_arch/</link>
    <pubDate>Sun, 05 Jan 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/20250105_arch/</guid>
    <description><![CDATA[<p>I recently bought a mini PC because I wanted a lightweight machine that I can easily carry anywhere. Arch Linux&rsquo;s minimalistic, rolling-release approach aligns perfectly with my love for a Vim-based workflow and a highly customizable setup. While the process can seem intimidating at first, it’s an incredibly rewarding experience that offers complete control over your system.</p>
<hr>
<h1 id="installing-arch-linux-uefi-or-bios">Installing Arch Linux (UEFI or BIOS)</h1>
<p>Arch Linux is well-known for giving users full control over their system. This guide walks you through a fresh Arch Linux installation. While it is detailed, always refer to the <a href="https://wiki.archlinux.org/" target="_blank" rel="noopener noreffer">official Arch Wiki</a>
 for up-to-date information.</p>]]></description>
</item>
</channel>
</rss>
