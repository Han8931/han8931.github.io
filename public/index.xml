<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Han&#39;s XYZ</title>
        <link>http://localhost:1313/</link>
        <description>Han&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tabularasa8931@gmail.com (Han)</managingEditor>
            <webMaster>tabularasa8931@gmail.com (Han)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 06 Sep 2025 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>NL2SQL Part 1.</title>
    <link>http://localhost:1313/nl2sql-p1/</link>
    <pubDate>Sat, 06 Sep 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/nl2sql-p1/</guid>
    <description><![CDATA[<h2 id="natural-language-to-sql-nl2sql-in-the-llm-era">üí°Natural Language to SQL (NL2SQL) in the LLM Era</h2>
<p>Data has become one of the most valuable resources of our time. Companies in finance, healthcare, logistics, retail, and many other fields collect enormous amounts of information every day. Much of this information is stored in relational databases, which are typically accessed using SQL.</p>
<p>While SQL provides the raw outputs of a query, the critical step lies in interpreting these results. Developing intuition from retrieved data is essential for identifying meaningful patterns, uncovering relationships, and supporting evidence-based decision-making.</p>]]></description>
</item>
<item>
    <title>Agentic AI with Pydantic-AI Part 1.</title>
    <link>http://localhost:1313/pydantic-ai/</link>
    <pubDate>Sun, 31 Aug 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/pydantic-ai/</guid>
    <description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>AI has already changed how we interact with technology. The real shift is happening now with <strong>agents</strong>: AI systems that can reason, make decisions, and take action.</p>
<p>Unlike a chatbot that passively replies, an agent can <strong>break down complex tasks</strong>, call APIs or databases, use tools, and deliver structured results. This is what makes the idea of <em>Agentic AI</em> so powerful ‚Äî it&rsquo;s not just about conversation, it&rsquo;s about <strong>problem-solving with initiative</strong>.</p>]]></description>
</item>
<item>
    <title>Clean Validation with Pydantic v2</title>
    <link>http://localhost:1313/pydantic/</link>
    <pubDate>Sat, 30 Aug 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/pydantic/</guid>
    <description><![CDATA[<blockquote>
<p>üìù <strong>Update</strong> (2025-08): This post was originally published in <strong>April 2024</strong> and has been updated to reflect changes in <strong>Pydantic v2</strong>, including the new <em>field validator</em>, <em>model validator</em>, and <em>Annotated</em>-based validation patterns. Also, this post now includes a <strong>new section on using Pydantic with MongoDB</strong>.</p></blockquote>
<p>Python&rsquo;s dynamic typing system is indeed convenient, allowing you to create variables without explicitly declaring their types. While this flexibility can streamline development, it can also introduce unexpected behavior, particularly when handling data from external sources like APIs or user input.</p>]]></description>
</item>
<item>
    <title>A Lesson from a Naive Binary Search</title>
    <link>http://localhost:1313/binary-search/</link>
    <pubDate>Mon, 30 Jun 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/binary-search/</guid>
    <description><![CDATA[<h2 id="a-lesson-from-a-naive-binary-search">A Lesson from a Naive Binary Search</h2>
<p>I&rsquo;ve been grinding hard every day, solving coding problems to get better at algorithms. Recently, I came across something interesting‚Äîa naive implementation of binary search can actually cause a bug. It&rsquo;s a small detail, but it matters.</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">mid</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span></span></span></code></pre></div></div>
<p>It works fine in Python‚Äîbut I recently learned that the way I calculate <code>mid</code> can cause problems in some cases.</p>]]></description>
</item>
<item>
    <title>Managing Password using Pass</title>
    <link>http://localhost:1313/pass/</link>
    <pubDate>Sat, 24 May 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/pass/</guid>
    <description><![CDATA[<h1 id="a-minimalists-guide-to-pass-the-unix-password-manager">A Minimalist‚Äôs Guide to <strong>pass</strong>‚Äî the Unix Password Manager</h1>
<p><em>Safely wrangle your secrets from the command-line using GPG encryption and a few intuitive commands.</em></p>
<hr>
<h2 id="1-why-pass">1. Why <em>pass</em>?</h2>
<ul>
<li><strong>Single-purpose &amp; transparent</strong> ‚Äì every secret is just a GPG-encrypted file in <code>~/.password-store/</code>.</li>
<li><strong>Leverages tools you already trust</strong> ‚Äì GnuPG for encryption and standard Unix commands for everything else (grep, git, find, etc.).</li>
<li><strong>Portable &amp; scriptable</strong> ‚Äì works the same on any POSIX shell and is easy to automate.</li>
</ul>
<blockquote>
<p><strong>Prerequisites</strong></p>]]></description>
</item>
<item>
    <title>Introduction to logging in Python</title>
    <link>http://localhost:1313/python-logging/</link>
    <pubDate>Sat, 17 May 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/python-logging/</guid>
    <description><![CDATA[<h2 id="a-gentle-practical-introduction-to-logging-in-python">A gentle, practical introduction to <code>logging</code> in Python</h2>
<hr>
<h3 id="why-bother-with-a-dedicated-logging-library">Why bother with a dedicated logging library?</h3>
<ul>
<li><strong>Prints don‚Äôt scale.</strong> <code>print()</code> is fine during quick experiments, but real programs need a record that can be filtered, rotated, or shipped elsewhere.</li>
<li><strong>Separation of concerns.</strong> You decide <em>what</em> to log in your code; <code>logging</code> decides <em>where</em> and <em>how</em> to write it (console, file, etc.).</li>
<li><strong>Built-in, no extra dependency.</strong> The standard library‚Äôs <code>logging</code> module is powerful enough for most applications.</li>
</ul>
<hr>
<h3 id="core-concepts">Core concepts</h3>
<table>
  <thead>
      <tr>
          <th>Concept</th>
          <th>Role in the ecosystem</th>
          <th>Typical examples</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Logger</strong></td>
          <td>The entry point your code calls (<code>logger.info(...)</code>). You can have many, one per module.</td>
          <td><code>&quot;__main__&quot;</code>, <code>&quot;my_package.worker&quot;</code></td>
      </tr>
      <tr>
          <td><strong>Handler</strong></td>
          <td>Decides <em>where</em> the record goes.</td>
          <td><code>StreamHandler</code> (stdout), <code>FileHandler</code>, <code>TimedRotatingFileHandler</code>, <code>SMTPHandler</code></td>
      </tr>
      <tr>
          <td><strong>Formatter</strong></td>
          <td>Decides <em>how</em> the record looks.</td>
          <td><code>'%(asctime)s - %(levelname)s - %(name)s - %(message)s'</code></td>
      </tr>
  </tbody>
</table>
<h3 id="a-minimal-logger">A minimal logger</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nb">format</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">%(levelname)s</span><span class="s2"> | </span><span class="si">%(message)s</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Hello, world!&#34;</span><span class="p">)</span></span></span></code></pre></div></div>
<ul>
<li><code>basicConfig</code> is a one-liner good for small scripts.</li>
<li>In bigger projects, mixing multiple modules / log files, you&rsquo;ll want finer control.</li>
</ul>
<hr>
<h3 id="rotating-files-at-midnight">Rotating files at midnight</h3>
<p><strong>Rotating a log file means creating a new log file after a certain time or size limit is reached</strong>. In this case, a new file is created every night at midnight. Only the most recent two log files are kept‚Äîyesterday&rsquo;s and today‚Äôs‚Äîwhile older ones are deleted automatically.</p>]]></description>
</item>
<item>
    <title>Rediscovering Python&#39;s Pathlib</title>
    <link>http://localhost:1313/pathlib/</link>
    <pubDate>Sat, 17 May 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/pathlib/</guid>
    <description><![CDATA[<h2 id="from-type-hint-to-power-tool--pythons-pathlib">From Type Hint to Power Tool:  Python&rsquo;s <code>Pathlib</code></h2>
<p>For a long time, I used <code>Path</code> from Python&rsquo;s <code>pathlib</code> module purely as a <strong>type hint</strong> - a way to make function signatures look more modern and semantically clear. Like this:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">process_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span></span></span></code></pre></div></div>
<p>It changed when I started building an application that handled user-uploaded documents. I had to create temporary folders, write intermediate files, manage output paths, and ensure directories existed before saving results. That&rsquo;s when <code>Path</code> went from <em>just a type hint</em> to a core part of my file management logic.</p>]]></description>
</item>
<item>
    <title>All‚Äëin‚ÄëOne Python Package¬†Manager: UV!</title>
    <link>http://localhost:1313/uv-package-manager/</link>
    <pubDate>Sun, 13 Apr 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/uv-package-manager/</guid>
    <description><![CDATA[<blockquote>
<p>üìù<strong>Update</strong> (2025-09-06): I&rsquo;ve added a new section on using &ndash;native-tls with corporate proxies. It covers why uv may fail with SSL errors at work and how to fix it by making uv trust your system certificates.</p></blockquote>
<h2 id="meet-uva-blazinglyfast-allinone-python-packagemanager">Meet <strong>uv</strong>¬†‚Äì¬†A Blazingly¬†Fast, All‚Äëin‚ÄëOne Python Package¬†Manager</h2>
<p>In my last post I dove into <strong><a href="https://han8931.github.io/20240707_poetry/" target="_blank" rel="noopener noreffer ">Poetry</a></strong>, one of the best‚Äëloved modern packaging tools. However, Poetry is just one piece of an toolkit: we still reach for <strong>pip</strong> to install packages, <strong>virtualenv</strong> to isolate them, <strong>pyenv</strong> to juggle Python versions, and maybe <strong>Pipenv</strong> or <strong>pip‚Äëtools</strong> for lock‚Äëfiles. Each solves its own niche, yet hopping between them adds friction. <strong>uv</strong> removes that friction. This single, project manager‚Äîwritten in Rust and typically <strong>10-1000x</strong> faster-replaces the whole stack: installing Python itself, creating virtual environments, resolving and locking dependencies, and even publishing to PyPI, all behind one concise CLI.</p>]]></description>
</item>
<item>
    <title>Git with Vim Fugitive: A Streamlined Workflow</title>
    <link>http://localhost:1313/vim-fugitive/</link>
    <pubDate>Sun, 13 Apr 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/vim-fugitive/</guid>
    <description><![CDATA[<p>If you&rsquo;re working with Git and Vim, <a href="https://github.com/tpope/vim-fugitive" target="_blank" rel="noopener noreffer "><strong>vim-fugitive</strong></a> is an essential plugin that transforms your editor into a full-fledged Git interface. Here&rsquo;s how I use Fugitive to review, stage, and commit changes‚Äîwithout ever leaving Vim.</p>
<h2 id="browsing-git-history-and-logs-first">Browsing Git History and Logs First</h2>
<p>Before jumping into edits, it‚Äôs often useful to understand the file‚Äôs history or recent project changes.</p>
<ul>
<li><code>:Git log</code> ‚Äî shows the project‚Äôs commit history in reverse chronological order</li>
<li><code>:0Gllog</code> ‚Äî shows the history of the current file</li>
</ul>
<p>To explore who changed what in a file:</p>]]></description>
</item>
<item>
    <title>Inside DeepSeek-R1</title>
    <link>http://localhost:1313/deepseek-inside/</link>
    <pubDate>Fri, 14 Feb 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/deepseek-inside/</guid>
    <description><![CDATA[<p><a href="https://www.deepseek.com/" target="_blank" rel="noopener noreffer ">DeepSeek</a>&rsquo;s latest moves have sent ripples through the AI community. Not only has it marked the beginning of a new era in artificial intelligence, but it has also made significant contributions to the open-source AI landscape. Their engineering techniques behind DeepSeek are truly impressive, and their reports are quite enjoyable. However, understanding their core ideas can be challenging and demands a substantial amount of effort.</p>
<p>At the forefront of this innovation is DeepSeek-R1, a model that built upon the foundation established by preceding projects such as DeepSeek Coder, Math, MoE, and notably, the DeepSeek-V3 model. While DeepSeek-R1 is the center of the DeepSeek&rsquo;s frenzy, its success is rooted on these past works.</p>]]></description>
</item>
</channel>
</rss>
