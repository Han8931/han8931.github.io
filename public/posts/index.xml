<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Han&#39;s XYZ</title>
        <link>http://localhost:1313/posts/</link>
        <description>All Posts | Han&#39;s XYZ</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tabularasa8931@gmail.com (Han)</managingEditor>
            <webMaster>tabularasa8931@gmail.com (Han)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 13 Sep 2025 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Docker Tutorial Part 1: Basics</title>
    <link>http://localhost:1313/docker-basics/</link>
    <pubDate>Sat, 13 Sep 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/docker-basics/</guid>
    <description><![CDATA[<p>This is part of my <strong>Docker Basics</strong> series ‚Äî introductory guides to help you get started with Docker, learn key concepts, and build your skills step by step.</p>
<ul>
<li><strong>Part 1: <a href="https://han8931.github.io/docker-basics/" target="_blank" rel="noopener noreffer ">Understanding Container</a></strong></li>
<li><strong>Part 2: <a href="https://han8931.github.io/docker-commands/" target="_blank" rel="noopener noreffer ">Basic Commands</a></strong></li>
<li><strong>Part 3: <a href="https://han8931.github.io/docker-dockerfile/" target="_blank" rel="noopener noreffer ">Dockerfile</a></strong></li>
<li><strong>Part 4: <a href="https://han8931.github.io/docker-networks/" target="_blank" rel="noopener noreffer ">Networks</a></strong></li>
</ul>
<h1 id="docker-fundamentals-part-1">Docker Fundamentals (Part 1)</h1>
<p>Software systems frequently exhibit environment-dependent behavior: dependency versions drift, filesystem paths diverge, and minor operating-system differences produce major failures. <strong>Containerization</strong> addresses this by packaging an application together with its runtime dependencies so that a single artifact executes consistently across development laptops, continuous-integration pipelines, and production clusters. Formally: same package $\rightarrow$ same behavior across environments.</p>]]></description>
</item>
<item>
    <title>Docker Tutorial Part 2: Basic Commands</title>
    <link>http://localhost:1313/docker-commands/</link>
    <pubDate>Sat, 13 Sep 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/docker-commands/</guid>
    <description><![CDATA[<p>This is part of my <strong>Docker Basics</strong> series ‚Äî introductory guides to help you get started with Docker, learn key concepts, and build your skills step by step.</p>
<ul>
<li><strong>Part 1: <a href="https://han8931.github.io/docker-basics/" target="_blank" rel="noopener noreffer ">Understanding Container</a></strong></li>
<li><strong>Part 2: <a href="https://han8931.github.io/docker-commands/" target="_blank" rel="noopener noreffer ">Basic Commands</a></strong></li>
<li><strong>Part 3: <a href="https://han8931.github.io/docker-dockerfile/" target="_blank" rel="noopener noreffer ">Dockerfile</a></strong></li>
<li><strong>Part 4: <a href="https://han8931.github.io/docker-networks/" target="_blank" rel="noopener noreffer ">Networks</a></strong></li>
</ul>
<h2 id="common-commands">Common Commands</h2>
<p>This is a no-frills cheat sheet for the Docker commands you&rsquo;ll reach for most of the time, with tiny runnable examples you can copy/paste.</p>]]></description>
</item>
<item>
    <title>Docker Tutorial Part 3: Dockerfile</title>
    <link>http://localhost:1313/docker-dockerfile/</link>
    <pubDate>Sat, 13 Sep 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/docker-dockerfile/</guid>
    <description><![CDATA[<p>This is part of my <strong>Docker Basics</strong> series ‚Äî introductory guides to help you get started with Docker, learn key concepts, and build your skills step by step.</p>
<ul>
<li><strong>Part 1: <a href="https://han8931.github.io/docker-basics/" target="_blank" rel="noopener noreffer ">Understanding Container</a></strong></li>
<li><strong>Part 2: <a href="https://han8931.github.io/docker-commands/" target="_blank" rel="noopener noreffer ">Basic Commands</a></strong></li>
<li><strong>Part 3: <a href="https://han8931.github.io/docker-dockerfile/" target="_blank" rel="noopener noreffer ">Dockerfile</a></strong></li>
<li><strong>Part 4: <a href="https://han8931.github.io/docker-networks/" target="_blank" rel="noopener noreffer ">Networks</a></strong></li>
</ul>
<h2 id="dockerfile">Dockerfile</h2>
<p>A <code>Dockerfile</code> is essentially a text file with a predetermined structure that contains a set of instructions for building a Docker image. The instructions in the Dockerfile specify what base image to start with (for example, Ubuntu 20.04), what software to install, and how to configure the image. The purpose of a Dockerfile is to automate the process of building a Docker image so that the image can be easily reproduced and distributed.</p>]]></description>
</item>
<item>
    <title>Docker Tutorial Part 4: Networks</title>
    <link>http://localhost:1313/docker-networks/</link>
    <pubDate>Sat, 13 Sep 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/docker-networks/</guid>
    <description><![CDATA[<p>This is part of my <strong>Docker Basics</strong> series ‚Äî introductory guides to help you get started with Docker, learn key concepts, and build your skills step by step.</p>
<ul>
<li><strong>Part 1: <a href="https://han8931.github.io/docker-basics/" target="_blank" rel="noopener noreffer ">Understanding Container</a></strong></li>
<li><strong>Part 2: <a href="https://han8931.github.io/docker-commands/" target="_blank" rel="noopener noreffer ">Basic Commands</a></strong></li>
<li><strong>Part 3: <a href="https://han8931.github.io/docker-dockerfile/" target="_blank" rel="noopener noreffer ">Dockerfile</a></strong></li>
<li><strong>Part 4: <a href="https://han8931.github.io/docker-networks/" target="_blank" rel="noopener noreffer ">Networks</a></strong></li>
</ul>
<h1 id="docker-networking">Docker Networking</h1>
<p>Docker offers four built-in network drivers: <strong>none, bridge, host,</strong> and <strong>overlay.</strong></p>
<ul>
<li><strong>Bridge (default)</strong>: Creates an isolated, software-defined network. Containers on the same bridge get private IPs and can communicate with each other, while anything outside can&rsquo;t reach them unless you explicitly publish ports.</li>
<li><strong>Host</strong>: Removes the isolation layer and uses the host&rsquo;s network stack directly. The container shares the host&rsquo;s IP address and network interfaces.</li>
<li><strong>Overlay</strong>: Builds a virtual network that spans multiple Docker hosts, so containers on different machines can talk as if they&rsquo;re on the same one‚Äîhandy for Docker Swarm.</li>
<li><strong>None</strong>: Disables networking (other than loopback) for the container.</li>
</ul>
<p>You can create and manage custom networks of any of these types with the Docker CLI.</p>]]></description>
</item>
<item>
    <title>NL2SQL Part 1.</title>
    <link>http://localhost:1313/nl2sql/</link>
    <pubDate>Sat, 06 Sep 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/nl2sql/</guid>
    <description><![CDATA[<h2 id="natural-language-to-sql-nl2sql-in-the-llm-era">üí°Natural Language to SQL (NL2SQL) in the LLM Era</h2>
<p>Data has become one of the most valuable resources of our time. Companies in finance, healthcare, logistics, retail, and many other fields collect enormous amounts of information every day. Much of this information is stored in relational databases, which are typically accessed using SQL.</p>
<p>While SQL provides the raw outputs of a query, the critical step lies in interpreting these results. Developing intuition from retrieved data is essential for identifying meaningful patterns, uncovering relationships, and supporting evidence-based decision-making.</p>]]></description>
</item>
<item>
    <title>Agentic AI with Pydantic-AI Part 1.</title>
    <link>http://localhost:1313/pydantic-ai/</link>
    <pubDate>Sun, 31 Aug 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/pydantic-ai/</guid>
    <description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>AI has already changed how we interact with technology. The real shift is happening now with <strong>agents</strong>: AI systems that can reason, make decisions, and take action.</p>
<p>Unlike a chatbot that passively replies, an agent can <strong>break down complex tasks</strong>, call APIs or databases, use tools, and deliver structured results. This is what makes the idea of <em>Agentic AI</em> so powerful ‚Äî it&rsquo;s not just about conversation, it&rsquo;s about <strong>problem-solving with initiative</strong>.</p>]]></description>
</item>
<item>
    <title>Clean Validation with Pydantic v2</title>
    <link>http://localhost:1313/pydantic/</link>
    <pubDate>Sat, 30 Aug 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/pydantic/</guid>
    <description><![CDATA[<blockquote>
<p>üìù <strong>Update</strong> (2025-08): This post was originally published in <strong>April 2024</strong> and has been updated to reflect changes in <strong>Pydantic v2</strong>, including the new <em>field validator</em>, <em>model validator</em>, and <em>Annotated</em>-based validation patterns. Also, this post now includes a <strong>new section on using Pydantic with MongoDB</strong>.</p></blockquote>
<p>Python&rsquo;s dynamic typing system is indeed convenient, allowing you to create variables without explicitly declaring their types. While this flexibility can streamline development, it can also introduce unexpected behavior, particularly when handling data from external sources like APIs or user input.</p>]]></description>
</item>
<item>
    <title>A Lesson from a Naive Binary Search</title>
    <link>http://localhost:1313/binary-search/</link>
    <pubDate>Mon, 30 Jun 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/binary-search/</guid>
    <description><![CDATA[<h2 id="a-lesson-from-a-naive-binary-search">A Lesson from a Naive Binary Search</h2>
<p>I&rsquo;ve been grinding hard every day, solving coding problems to get better at algorithms. Recently, I came across something interesting‚Äîa naive implementation of binary search can actually cause a bug. It&rsquo;s a small detail, but it matters.</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">mid</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span></span></span></code></pre></div></div>
<p>It works fine in Python‚Äîbut I recently learned that the way I calculate <code>mid</code> can cause problems in some cases.</p>]]></description>
</item>
<item>
    <title>Managing Password using Pass</title>
    <link>http://localhost:1313/pass/</link>
    <pubDate>Sat, 24 May 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/pass/</guid>
    <description><![CDATA[<h1 id="a-minimalists-guide-to-pass-the-unix-password-manager">A Minimalist‚Äôs Guide to <strong>pass</strong>‚Äî the Unix Password Manager</h1>
<p><em>Safely wrangle your secrets from the command-line using GPG encryption and a few intuitive commands.</em></p>
<hr>
<h2 id="1-why-pass">1. Why <em>pass</em>?</h2>
<ul>
<li><strong>Single-purpose &amp; transparent</strong> ‚Äì every secret is just a GPG-encrypted file in <code>~/.password-store/</code>.</li>
<li><strong>Leverages tools you already trust</strong> ‚Äì GnuPG for encryption and standard Unix commands for everything else (grep, git, find, etc.).</li>
<li><strong>Portable &amp; scriptable</strong> ‚Äì works the same on any POSIX shell and is easy to automate.</li>
</ul>
<blockquote>
<p><strong>Prerequisites</strong></p>]]></description>
</item>
<item>
    <title>Introduction to logging in Python</title>
    <link>http://localhost:1313/python-logging/</link>
    <pubDate>Sat, 17 May 2025 00:00:00 &#43;0000</pubDate>
    <author>Han</author>
    <guid>http://localhost:1313/python-logging/</guid>
    <description><![CDATA[<h2 id="a-gentle-practical-introduction-to-logging-in-python">A gentle, practical introduction to <code>logging</code> in Python</h2>
<hr>
<h3 id="why-bother-with-a-dedicated-logging-library">Why bother with a dedicated logging library?</h3>
<ul>
<li><strong>Prints don‚Äôt scale.</strong> <code>print()</code> is fine during quick experiments, but real programs need a record that can be filtered, rotated, or shipped elsewhere.</li>
<li><strong>Separation of concerns.</strong> You decide <em>what</em> to log in your code; <code>logging</code> decides <em>where</em> and <em>how</em> to write it (console, file, etc.).</li>
<li><strong>Built-in, no extra dependency.</strong> The standard library‚Äôs <code>logging</code> module is powerful enough for most applications.</li>
</ul>
<hr>
<h3 id="core-concepts">Core concepts</h3>
<table>
  <thead>
      <tr>
          <th>Concept</th>
          <th>Role in the ecosystem</th>
          <th>Typical examples</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Logger</strong></td>
          <td>The entry point your code calls (<code>logger.info(...)</code>). You can have many, one per module.</td>
          <td><code>&quot;__main__&quot;</code>, <code>&quot;my_package.worker&quot;</code></td>
      </tr>
      <tr>
          <td><strong>Handler</strong></td>
          <td>Decides <em>where</em> the record goes.</td>
          <td><code>StreamHandler</code> (stdout), <code>FileHandler</code>, <code>TimedRotatingFileHandler</code>, <code>SMTPHandler</code></td>
      </tr>
      <tr>
          <td><strong>Formatter</strong></td>
          <td>Decides <em>how</em> the record looks.</td>
          <td><code>'%(asctime)s - %(levelname)s - %(name)s - %(message)s'</code></td>
      </tr>
  </tbody>
</table>
<h3 id="a-minimal-logger">A minimal logger</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nb">format</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">%(levelname)s</span><span class="s2"> | </span><span class="si">%(message)s</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Hello, world!&#34;</span><span class="p">)</span></span></span></code></pre></div></div>
<ul>
<li><code>basicConfig</code> is a one-liner good for small scripts.</li>
<li>In bigger projects, mixing multiple modules / log files, you&rsquo;ll want finer control.</li>
</ul>
<hr>
<h3 id="rotating-files-at-midnight">Rotating files at midnight</h3>
<p><strong>Rotating a log file means creating a new log file after a certain time or size limit is reached</strong>. In this case, a new file is created every night at midnight. Only the most recent two log files are kept‚Äîyesterday&rsquo;s and today‚Äôs‚Äîwhile older ones are deleted automatically.</p>]]></description>
</item>
</channel>
</rss>
